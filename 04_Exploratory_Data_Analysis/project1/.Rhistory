library("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
exit()
q()
library("swirl")
swirl()
read.csv(path2csv)
read.csv(path2csv,  stringsAsFactors=FALSE)
mydf<-read.csv(path2csv,  stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
5:20
-(5:20)
select(cran, -(X:10)
)
select(cran, -(X:size))
filter(cran,package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?comparison
?Comparison
filter(cran, country=="IN", r_version<="3.0.2")
filter(cran, country=="US"|country=="IN")
filter(cran, size>100500)
filter(cran, size>100500, r_os="linux-gnu")
filter(cran, size>100500 & r_os="linux-gnu")
filter(cran, size>100500 & r_os=="linux-gnu")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<-arrange(select(cran))
cran2<-arrange(cran)
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package,ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(ip_id,package, size)
cran3<-select(cran,ip_id,package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb/2^10)
mutate(cran3, size_gb=size_mb/2^10)
cran3
mutate(cran3, size_mb=size/2^20, size_gb=size_mb/2^10)
mutate(cran3, correct_size=sizee)
mutate(cran3, correct_size=size)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes=mean(size))
library(deplyr)
library(dplyr)
tbl_df()
tbl<-tbl_df(mydf)
cran<-tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by
by_package cran %>% group_by(package)
by_package <- cran %>% group_by(package)
by_package<-group_by(cran,package)
by_package
summarize(by_package)
summarize(by_package, mean(size))
summarize(by_package, mean(size))
reset()
swirl()
submit()
submit(by_package)
submit()
submit(1)
submit()
submit(by_package)
pack_sum
quantile(pack$count,probs=0.99)
quantile(pack_sum$count,probs=0.99)
filter(pack_sum, unique>679)
filter(pack_sum, count>679)
top_counts<-filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted<- arrange(top_counts, count)
top_counts_sorted<- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted<- attange(top_unique, desc(unique))
top_unique_sorted<- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit(top_unique)
submit()
submit(top_unique)
submit(top_unique)
View(top_unique)
View(result3)
submit(top_unique)
submit(top_unique)
submit(top_unique)
submit(top_unique)
submit(top_unique)
library(tidyr)
students
?gatehr
?gatethr
?gather
gather(students, sex,count,-grade)
students2
gather(students2, sex_class, count)
gather(students2, sex_class, count,-grade)
res<-gather(students2, sex_class, count,-grade)
res
?seperate
?seperate()
?seperate
?separate
separate(data=res, col=sex_class, into =c("sex", "class"))
submit(students2)
submit(students2)
submit(students2)
students3
submit(students3)
submit(students3)
submit(students3)
submit(students3)
?spread
?spread
submit(x)
submit(x)
submit(x)
submit(x)
submit(x)
library(readr)
parse_number("class5")
parse_number("class5")
submit(x)
submit(x)
?mutate
submit(x)
submit(x)
submit(x)
submit(x)
students4
submit(x)
submit(x)
submit(x)
submit(x)
submit(x)
submit(x)
submit(x)
submit(x)
passed
failed
mutate(passed, status="passed")
passed<-passed%>%mutate(status="passed")
failed<-failed%>%mutate(status="failed")
bind_rows(passed,failed)
sat
sat
submit(x)
submit(x)
submit(x)
submit(x)
reset()
swirl()
submit(x)
submit(x)
submit(x)
q()
d2<-Sys.Date()
d2
class(d2)
class(Sys.Date())
ymd("20140108")
install.packages("ymd")
ymd_hms("20140108")
clear()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(EPA)
head(pollution)
dim(pollution)
summary(pollution$pm25)
ppm
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
rug(15,5)
rug(5,15)
low
high
hist(ppm,col="green", hreaks=100)
hist(ppm,col="green", breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
mediam(ppm)
median(ppm)
abline(v=median(ppm),col="magenta", lwd=4)
k lh,lok -3;s)
swirl()
library("swirl")
swirl()
head(pollution)
names(pollution)
pollution$region
table(pollution$region)
reg<-table(pollution$region)
reg
summary(reg)
barplot(reg,col="wheat", main="Number of Counties in Each Region")
barchart(region~pm25, ppm, col="red")
barplot(region~pm25, ppm, col="red")
ggplot2(region~pm25, ppm, col="red")
ggplot(region~pm25, ppm, col="red")
library("lattice")
boxplot(region~pm25, data=pollution, col="red")
boxplot(pm25~region, data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east
east<-subset(pollution)
east<-subset(pollution, region="east")
east<-subset(pollution, region=="east")
head(east)
hist(east, col="green")
hist.default(east, col="green")
x<-hist.default(east, col="green")
hist(east$pm25, col="green")
west<-subset(pollution, region=="west")
hist(subset(pollution, region=="west")$pm25, col="green")
plot(
)
plot(pollution)
wih(pollution, plot(latitude,pm25))
with(pollution, plot(latitude,pm25))
with(pollution, plot(latitude,pm25))
abline(h=12,lwd=2,lty=2)
abline(h=12,lwd=2,lty=2,col=pollution$region)
plot(pollution$latitude,ppm,col=pollution$region)
abline(12,lwd=2,lty=2)
abline(v=12,lwd=2,lty=2)
abline(h=12,lwd=2,lty=2)
par(mfrow=c(1,2),mar=c(5,4,2,1))
west<-subset(pollution)
west<-subset(pollution,region=="west")
plot(west$latitude, west$pm25, title="West")
plot(west$latitude, west$pm25, main="West")
plot(west$latitude, west$pm25, main="East")
west<-subset(pollution,region=="est")
west<-subset(pollution,region=="east")
plot(east$latitude, east$pm25, main="East")
q()
library("data.table")
setwd("D:/Datascience/courcera-datascience/04_Exploratory_Data_Analysis/project1")
#Reads in data from file then subsets data for specified dates
hhpcData <- data.table::fread(input = "household_power_consumption.txt"
, na.strings="?"
)
# Prevents histogram from printing in scientific notation
hhpcData[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Change Date Column to Date Type
hhpcData[, Date := lapply(.SD, as.Date, "%d/%m/%Y"), .SDcols = c("Date")]
# Filter Dates for 2007-02-01 and 2007-02-02
hhpcData <- hhpcData[(Date >= "2007-02-01") & (Date <= "2007-02-02")]
png("plot1.png", width=480, height=480)
## Plot 1
hist(hhpcData[, Global_active_power], main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
dev.off()
library("data.table")
setwd("D:/Datascience/courcera-datascience/04_Exploratory_Data_Analysis/project1")
#Reads in data from file then subsets data for specified dates
hhpcData <- data.table::fread(input = "household_power_consumption.txt"
, na.strings="?"
)
# Prevents Scientific Notation
hhpcData[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Making a POSIXct date capable of being filtered and graphed by time of day
hhpcData[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
# Filter Dates for 2007-02-01 and 2007-02-02
hhpcData <- hhpcData[(dateTime >= "2007-02-01") & (dateTime < "2007-02-03")]
png("plot2.png", width=480, height=480)
## Plot 2
plot(x = hhpcData[, dateTime]
, y = hhpcData[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
setwd("D:/Datascience/courcera-datascience/04_Exploratory_Data_Analysis/project1")
#Reads in data from file then subsets data for specified dates
hhpcData <- data.table::fread(input = "household_power_consumption.txt"
, na.strings="?"
)
# Prevents Scientific Notation
hhpcData[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Making a POSIXct date capable of being filtered and graphed by time of day
hhpcData[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
# Filter Dates for 2007-02-01 and 2007-02-02
hhpcData <- hhpcData[(dateTime >= "2007-02-01") & (dateTime < "2007-02-03")]
# Filter Dates for 2007-02-01 and 2007-02-02
hhpcData <- hhpcData[(dateTime >= "2007-02-01") & (dateTime < "2007-02-03")]
png("plot2.png", width=480, height=480)
## Plot 2
plot(x = hhpcData[, dateTime]
, y = hhpcData[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
## Plot 2
plot(x = hhpcData[, dateTime]
, y = hhpcData[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
library("data.table")
setwd("D:/Datascience/courcera-datascience/04_Exploratory_Data_Analysis/project1")
#Reads in data from file then subsets data for specified dates
hhpcData <- data.table::fread(input = "household_power_consumption.txt"
, na.strings="?"
)
# Prevents Scientific Notation
hhpcData[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Making a POSIXct date capable of being filtered and graphed by time of day
hhpcData[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
# Filter Dates for 2007-02-01 and 2007-02-02
hhpcData <- hhpcData[(dateTime >= "2007-02-01") & (dateTime < "2007-02-03")]
png("plot3.png", width=480, height=480)
# Plot 3
plot(hhpcData[, dateTime], powerDT[, Sub_metering_1], type="l", xlab="", ylab="Energy sub metering")
lines(hhpcData[, dateTime], powerDT[, Sub_metering_2],col="red")
lines(hhpcData[, dateTime], powerDT[, Sub_metering_3],col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
,lty=c(1,1), lwd=c(1,1))
dev.off()
library("data.table")
setwd("D:/Datascience/courcera-datascience/04_Exploratory_Data_Analysis/project1")
#Reads in data from file then subsets data for specified dates
hhpcData <- data.table::fread(input = "household_power_consumption.txt"
, na.strings="?"
)
# Prevents Scientific Notation
hhpcData[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Making a POSIXct date capable of being filtered and graphed by time of day
hhpcData[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
# Filter Dates for 2007-02-01 and 2007-02-02
hhpcData <- hhpcData[(dateTime >= "2007-02-01") & (dateTime < "2007-02-03")]
png("plot3.png", width=480, height=480)
# Plot 3
plot(hhpcData[, dateTime], powerDT[, Sub_metering_1], type="l", xlab="", ylab="Energy sub metering")
lines(hhpcData[, dateTime], powerDT[, Sub_metering_2],col="red")
lines(hhpcData[, dateTime], powerDT[, Sub_metering_3],col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
,lty=c(1,1), lwd=c(1,1))
dev.off()
library("data.table")
setwd("D:/Datascience/courcera-datascience/04_Exploratory_Data_Analysis/project1")
#Reads in data from file then subsets data for specified dates
hhpcData <- data.table::fread(input = "household_power_consumption.txt"
, na.strings="?"
)
# Prevents Scientific Notation
hhpcData[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Making a POSIXct date capable of being filtered and graphed by time of day
hhpcData[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
# Filter Dates for 2007-02-01 and 2007-02-02
hhpcData <- hhpcData[(dateTime >= "2007-02-01") & (dateTime < "2007-02-03")]
png("plot3.png", width=480, height=480)
# Plot 3
plot(hhpcData[, dateTime], hhpcData[, Sub_metering_1], type="l", xlab="", ylab="Energy sub metering")
lines(hhpcData[, dateTime], hhpcData[, Sub_metering_2],col="red")
lines(hhpcData[, dateTime], hhpcData[, Sub_metering_3],col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
,lty=c(1,1), lwd=c(1,1))
dev.off()
library("data.table")
setwd("D:/Datascience/courcera-datascience/04_Exploratory_Data_Analysis/project1")
#Reads in data from file then subsets data for specified dates
hhpcData <- data.table::fread(input = "household_power_consumption.txt"
, na.strings="?"
)
# Prevents Scientific Notation
hhpcData[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Making a POSIXct date capable of being filtered and graphed by time of day
hhpcData[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
# Filter Dates for 2007-02-01 and 2007-02-02
hhpcData <- hhpcData[(dateTime >= "2007-02-01") & (dateTime < "2007-02-03")]
png("plot4.png", width=480, height=480)
par(mfrow=c(2,2))
# Plot 1
plot(hhpcData[, dateTime], hhpcData[, Global_active_power], type="l", xlab="", ylab="Global Active Power")
# Plot 2
plot(hhpcData[, dateTime],hhpcData[, Voltage], type="l", xlab="datetime", ylab="Voltage")
# Plot 3
plot(hhpcData[, dateTime], hhpcData[, Sub_metering_1], type="l", xlab="", ylab="Energy sub metering")
lines(hhpcData[, dateTime], hhpcData[, Sub_metering_2], col="red")
lines(hhpcData[, dateTime], hhpcData[, Sub_metering_3],col="blue")
legend("topright", col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
, lty=c(1,1)
, bty="n"
, cex=.5)
# Plot 4
plot(hhpcData[, dateTime], hhpcData[,Global_reactive_power], type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
library("data.table")
setwd("D:/Datascience/courcera-datascience/04_Exploratory_Data_Analysis/project1")
#Reads in data from file then subsets data for specified dates
hhpcData <- data.table::fread(input = "household_power_consumption.txt"
, na.strings="?"
)
# Prevents histogram from printing in scientific notation
hhpcData[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Change Date Column to Date Type
hhpcData[, Date := lapply(.SD, as.Date, "%d/%m/%Y"), .SDcols = c("Date")]
# Filter Dates for 2007-02-01 and 2007-02-02
hhpcData <- hhpcData[(Date >= "2007-02-01") & (Date <= "2007-02-02")]
png("plot1.png", width=480, height=480)
## Plot 1
hist(hhpcData[, Global_active_power], main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
dev.off()
library("data.table")
setwd("D:/Datascience/courcera-datascience/04_Exploratory_Data_Analysis/project1")
#Reads in data from file then subsets data for specified dates
hhpcData <- data.table::fread(input = "household_power_consumption.txt"
, na.strings="?"
)
# Prevents Scientific Notation
hhpcData[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Making a POSIXct date capable of being filtered and graphed by time of day
hhpcData[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
# Filter Dates for 2007-02-01 and 2007-02-02
hhpcData <- hhpcData[(dateTime >= "2007-02-01") & (dateTime < "2007-02-03")]
png("plot2.png", width=480, height=480)
## Plot 2
plot(x = hhpcData[, dateTime]
, y = hhpcData[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
library("data.table")
setwd("D:/Datascience/courcera-datascience/04_Exploratory_Data_Analysis/project1")
#Reads in data from file then subsets data for specified dates
hhpcData <- data.table::fread(input = "household_power_consumption.txt"
, na.strings="?"
)
# Prevents Scientific Notation
hhpcData[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Making a POSIXct date capable of being filtered and graphed by time of day
hhpcData[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
# Filter Dates for 2007-02-01 and 2007-02-02
hhpcData <- hhpcData[(dateTime >= "2007-02-01") & (dateTime < "2007-02-03")]
png("plot4.png", width=480, height=480)
par(mfrow=c(2,2))
# Plot 1
plot(hhpcData[, dateTime], hhpcData[, Global_active_power], type="l", xlab="", ylab="Global Active Power")
# Plot 2
plot(hhpcData[, dateTime],hhpcData[, Voltage], type="l", xlab="datetime", ylab="Voltage")
# Plot 3
plot(hhpcData[, dateTime], hhpcData[, Sub_metering_1], type="l", xlab="", ylab="Energy sub metering")
lines(hhpcData[, dateTime], hhpcData[, Sub_metering_2], col="red")
lines(hhpcData[, dateTime], hhpcData[, Sub_metering_3],col="blue")
legend("topright", col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
, lty=c(1,1)
, bty="n"
, cex=.5)
# Plot 4
plot(hhpcData[, dateTime], hhpcData[,Global_reactive_power], type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
library("data.table")
setwd("D:/Datascience/courcera-datascience/04_Exploratory_Data_Analysis/project1")
#Reads in data from file then subsets data for specified dates
hhpcData <- data.table::fread(input = "household_power_consumption.txt"
, na.strings="?"
)
# Prevents Scientific Notation
hhpcData[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Making a POSIXct date capable of being filtered and graphed by time of day
hhpcData[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
# Filter Dates for 2007-02-01 and 2007-02-02
hhpcData <- hhpcData[(dateTime >= "2007-02-01") & (dateTime < "2007-02-03")]
png("plot3.png", width=480, height=480)
# Plot 3
plot(hhpcData[, dateTime], hhpcData[, Sub_metering_1], type="l", xlab="", ylab="Energy sub metering")
lines(hhpcData[, dateTime], hhpcData[, Sub_metering_2],col="red")
lines(hhpcData[, dateTime], hhpcData[, Sub_metering_3],col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
,lty=c(1,1), lwd=c(1,1))
dev.off()
